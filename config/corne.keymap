/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE    0
#define NUM_NAV 1
#define FUNC    2

/ {
    behaviors {
        bd: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSCP>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lftrt: left_right {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp RIGHT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        td: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };
        
    keymap {
        compatible = "zmk,keymap";
        base_layer {
// ----------------------------------------------------------------------------------------------
// | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  GQT -/=           |
// | ALT  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '                 |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | MORPH (ALT) LFT/RT |
//           | GUI | GQT TAB/CTRL | NUM |   | MORPH (SHFT) BKSP/DEL | SPC | GQT ENT/SHFT        |
            bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T       &kp Y &kp U  &kp I     &kp O   &kp P    &gqt MINUS EQUAL
   &td LALT  &kp A &kp S &kp D &kp F &kp G       &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &td LSHFT &kp Z &kp X &kp C &kp V &kp B       &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &lftrt
       &kp LGUI &gqt TAB LCTRL &to NUM_NAV       &bd &kp SPACE &gqt RET LSHFT
            >;
        };
        num_nav_layer {
// ------------------------------------------------------------------------------------------
// | ` |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
// |   | LFT | UP  | DWN | RGT | HOME|   |  -  |  4  |  5  |  6  |  [  |  ]  |
// |   | LFT | DWN | RGT | APP | END |   |  +  |  1  |  2  |  3  |  \  |     |
//                 |     |     | FUNC|   |     | BASE|     |
            bindings = <
   &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5            &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans
   &trans &kp LEFT &kp UP &kp DOWN &kp RIGHT &kp HOME      &kp MINUS &kp N4 &kp N5 &kp N6 &kp LBKT &kp RBKT
   &trans &kp LEFT &kp DOWN &kp RIGHT &kp K_APP &kp END    &kp PLUS  &kp N1 &kp N2 &kp N3 &kp BSLH &trans
                            &trans &trans &to FUNC         &trans &to BASE &trans
            >;
        };

        func_layer {
// -----------------------------------------------------------------------------------------
// | ESC | F1   | F2   | F3   | F4   | F5   |    | F6 | F7 | F8 | F9 | F10 | F11 |
// |     |BT CLR| BT 0 | BT 1 | BT 2 | BT 3 |    |    |    |    |    |     | F12 |
// |     |      |      |      |      |      |    |    |    |    |    |     |     |
//                     |      |      |      |    |    |BASE|    |
            bindings = <
   &kp ESC  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5   &kp F6 &kp F7  &kp F8 &kp F9 &kp F10 &kp F11
   &trans   &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &trans   &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &trans &trans   &kp SPACE   &kp RET   &to BASE    &kp RALT
            >;
        };
    };
};
